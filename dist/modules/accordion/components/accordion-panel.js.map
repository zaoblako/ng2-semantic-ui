{"version":3,"file":"accordion-panel.js","sourceRoot":"","sources":["../../../../src/modules/accordion/components/accordion-panel.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAE,iBAAiB,EAAE,MAAM,eAAe,CAAC;AAE1F,OAAO,EAAE,oBAAoB,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAC;AA6B1E,IAAa,iBAAiB;IA4D1B,2BAAoB,eAAiC;QAAjC,oBAAe,GAAf,eAAe,CAAkB;QACjD,IAAI,CAAC,oBAAoB,GAAG,IAAI,oBAAoB,CAAC,KAAK,CAAC,CAAC;QAE5D,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,YAAY,GAAG,IAAI,YAAY,CAAU,KAAK,CAAC,CAAC;IACzD,CAAC;IA5DD,sBAAW,sCAAO;aAAlB,UAAmB,OAA2B;YAC1C,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;YACxB,IAAI,CAAC,eAAe,CAAC,aAAa,EAAE,CAAC;QACzC,CAAC;;;OAAA;IAQD,sBAAW,qCAAM;aAAjB;YACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACxB,CAAC;aAED,UAAkB,KAAa;YAC3B,gDAAgD;YAChD,IAAM,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC;YAEvB,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBACzB,wCAAwC;gBACxC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;gBAEtB,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAC1B,8DAA8D;oBAC9D,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;gBACzC,CAAC;gBACD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAEpC,oFAAoF;gBACpF,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,CAAC;gBACpC,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAChG,CAAC;QACL,CAAC;;;OApBA;IAsBD,sBAAW,yCAAU;aAArB;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAChB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;YACpC,CAAC;YAED,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;;;OAAA;IAED,sBAAW,iDAAkB;aAA7B;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAChB,kDAAkD;gBAClD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC;YAC5C,CAAC;YACD,4DAA4D;YAC5D,MAAM,CAAC,CAAC,CAAC;QACb,CAAC;;;OAAA;IAYM,kCAAM,GAAb;QACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;QAC/B,CAAC;IACL,CAAC;IACL,wBAAC;AAAD,CAAC,AAxED,IAwEC;AA7DG;IADC,KAAK,EAAE;;qDACkB;AAK1B;IADC,KAAK,EAAE;;;+CAGP;AAwCD;IADC,MAAM,EAAE;8BACW,YAAY;uDAAU;AA1DjC,iBAAiB;IA3B7B,SAAS,CAAC;QACP,QAAQ,EAAE,qBAAqB;QAC/B,QAAQ,EAAE,mBAAmB;QAC7B,QAAQ,EAAE,8ZAWb;QACG,MAAM,EAAE,CAAC,2LAUZ,CAAC;KACD,CAAC;qCA6DsC,iBAAiB;GA5D5C,iBAAiB,CAwE7B;SAxEY,iBAAiB","sourcesContent":["import { Component, Input, Output, EventEmitter, ChangeDetectorRef } from \"@angular/core\";\nimport { SuiAccordionService } from \"../services/accordion.service\";\nimport { TransitionController, Transition } from \"../../transition/index\";\n\n@Component({\n    selector: \"sui-accordion-panel\",\n    exportAs: \"suiAccordionPanel\",\n    template: `\n<!-- Title -->\n<div class=\"title\" [class.active]=\"isOpen\" (click)=\"toggle()\" >\n    <ng-content select=\"[title]\"></ng-content>\n</div>\n<!-- Content -->\n<div [suiCollapse]=\"!isOpen\" [collapseDuration]=\"transitionDuration\">\n    <div class=\"content\" [class.active]=\"isOpen\" [suiTransition]=\"transitionController\">\n        <ng-content select=\"[content]\"></ng-content>\n    </div>\n</div>\n`,\n    styles: [`\n/* Manual style as Semantic UI relies on > selector */\n.content {\n    padding: .5em 0 1em;\n}\n\n/* Another > selector fix */\n:host:first-child .title {\n    border-top: none;\n}\n`]\n})\nexport class SuiAccordionPanel {\n    private _service:SuiAccordionService;\n\n    public transitionController:TransitionController;\n\n    public set service(service:SuiAccordionService) {\n        this._service = service;\n        this._changeDetector.detectChanges();\n    }\n\n    @Input()\n    public isDisabled:boolean;\n\n    private _isOpen:boolean;\n\n    @Input()\n    public get isOpen():boolean {\n        return this._isOpen;\n    }\n\n    public set isOpen(value:boolean) {\n        // Convert to boolean (fixes false != undefined)\n        const isOpen = !!value;\n\n        if (isOpen !== this.isOpen) {\n            // Only update if the value has changed.\n            this._isOpen = isOpen;\n\n            if (isOpen && this._service) {\n                // If we are opening this panel, we must close the other ones.\n                this._service.closeOtherPanels(this);\n            }\n            this.isOpenChange.emit(this.isOpen);\n\n            // Cancel all current animations, and fade the contents. The direction is automatic.\n            this.transitionController.stopAll();\n            this.transitionController.animate(new Transition(this.transition, this.transitionDuration));\n        }\n    }\n\n    public get transition():string {\n        if (this._service) {\n            return this._service.transition;\n        }\n\n        return \"fade\";\n    }\n\n    public get transitionDuration():number {\n        if (this._service) {\n            // Return the service defined transition duration.\n            return this._service.transitionDuration;\n        }\n        // Revert to instantaneous if the service is not yet loaded.\n        return 0;\n    }\n\n    @Output()\n    public isOpenChange:EventEmitter<boolean>;\n\n    constructor(private _changeDetector:ChangeDetectorRef) {\n        this.transitionController = new TransitionController(false);\n\n        this._isOpen = false;\n        this.isOpenChange = new EventEmitter<boolean>(false);\n    }\n\n    public toggle():void {\n        if (!this.isDisabled) {\n            this.isOpen = !this.isOpen;\n        }\n    }\n}\n"]}