{"version":3,"file":"radio-manager.js","sourceRoot":"","sources":["../../../../src/modules/checkbox/directives/radio-manager.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAoB,eAAe,EAAE,SAAS,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AACpG,OAAO,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAE/C,OAAO,EAAE,IAAI,EAAE,MAAM,0BAA0B,CAAC;AAKhD,IAAa,eAAe;IAYxB,yBAAmB,OAAkB;QAAlB,YAAO,GAAP,OAAO,CAAW;QACjC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;IACzB,CAAC;IAEM,4CAAkB,GAAzB;QAAA,iBAMC;QALG,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,aAAa,EAAE,EAApB,CAAoB,CAAC,CAAC;QAEhE,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,YAAY,EAAE,EAAnB,CAAmB,CAAC,CAAC;IACtE,CAAC;IAEO,uCAAa,GAArB;QAAA,iBAIC;QAHG,IAAI,CAAC,YAAY;aACZ,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,KAAK,KAAI,EAAV,CAAU,CAAC;aACvB,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,QAAQ,GAAG,IAAI,EAAjB,CAAiB,CAAC,CAAC;IACzC,CAAC;IAEO,sCAAY,GAApB;QAAA,iBAgBC;QAfG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,WAAW,EAAE,EAAf,CAAe,CAAC,CAAC;QAC9C,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QAErB,IAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,EAAE,MAAM,CAAC,CAAC;QAC1E,MAAM;aACD,IAAI,CAAC,MAAM,CAAC;aACZ,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,MAAM,CAAC,CAAC,CAAC,EAAT,CAAS,CAAC;aACnB,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC;aACV,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,UAAU;aACxB,IAAI,CAAC,CAAC,CAAC,oBAAoB;aACvB,SAAS,CAAC,UAAC,CAAG;YACX,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACjB,CAAC,CAAC,OAAO,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,EAAnB,CAAmB,CAAC,CAAC;YAC5C,CAAC;QACL,CAAC,CAAC,CAAC,EANG,CAMH,CAAC,EAPF,CAOE,CAAC,CAAC;IAC1B,CAAC;IACL,sBAAC;AAAD,CAAC,AAhDD,IAgDC;AA3CG;IADC,eAAe,CAAC,iBAAe,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;8BACnC,SAAS;qDAAqB;AAGnD;IADC,eAAe,CAAC,QAAQ,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;8BACzB,SAAS;wDAAc;AARtC,eAAe;IAH3B,SAAS,CAAC;QACP,QAAQ,EAAE,oDAAoD;KACjE,CAAC;qCAa6B,UAAU;GAZ5B,eAAe,CAgD3B;SAhDY,eAAe","sourcesContent":["import { Directive, AfterContentInit, ContentChildren, QueryList, ElementRef } from \"@angular/core\";\nimport { SuiRadio } from \"../components/radio\";\nimport { Subscription } from \"rxjs/Subscription\";\nimport { Util } from \"../../../misc/util/index\";\n\n@Directive({\n    selector: \"form:not([ngForm]):not([[ngForm]]),ngForm,[ngForm]\"\n})\nexport class SuiRadioManager<T> implements AfterContentInit {\n\n    public isNested:boolean;\n\n    @ContentChildren(SuiRadioManager, { descendants: true })\n    private _subManagers:QueryList<SuiRadioManager<T>>;\n\n    @ContentChildren(SuiRadio, { descendants: true })\n    private _renderedRadios:QueryList<SuiRadio<T>>;\n\n    private _radioSubs:Subscription[];\n\n    constructor(public element:ElementRef) {\n        this.isNested = false;\n        this._radioSubs = [];\n    }\n\n    public ngAfterContentInit():void {\n        this.updateNesting();\n        this._subManagers.changes.subscribe(() => this.updateNesting());\n\n        this.updateRadios();\n        this._renderedRadios.changes.subscribe(() => this.updateRadios());\n    }\n\n    private updateNesting():void {\n        this._subManagers\n            .filter(m => m !== this)\n            .forEach(m => m.isNested = true);\n    }\n\n    private updateRadios():void {\n        this._radioSubs.forEach(s => s.unsubscribe());\n        this._radioSubs = [];\n\n        const groups = Util.Array.groupBy(this._renderedRadios.toArray(), \"name\");\n        Object\n            .keys(groups)\n            .map(k => groups[k])\n            .forEach(g => g\n                .forEach(r => this._radioSubs\n                    .push(r.onCurrentValueChange\n                        .subscribe((v:T) => {\n                            if (!this.isNested) {\n                                g.forEach(radio => radio.writeValue(v));\n                            }\n                        }))));\n    }\n}\n"]}