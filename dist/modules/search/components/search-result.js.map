{"version":3,"file":"search-result.js","sourceRoot":"","sources":["../../../../src/modules/search/components/search-result.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACH,SAAS,EAAE,SAAS,EAAE,gBAAgB,EAAyB,WAAW,EAC1E,KAAK,EAAE,WAAW,EACrB,MAAM,eAAe,CAAC;AACvB,OAAO,EAAuB,mBAAmB,EAAE,MAAM,0BAA0B,CAAC;AAGpF,4DAA4D;AAC5D,IAAM,WAAW,GAAG,WAAW,CAAC;AAShC,IAAa,eAAe;IAoCxB,yBAAmB,gBAAoC;QAApC,qBAAgB,GAAhB,gBAAgB,CAAoB;QACnD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAE3B,4HAA4H;QAC5H,IAAI,CAAC,SAAS,GAAG,UAAA,KAAK,IAAI,OAAA,EAAE,EAAF,CAAE,CAAC;IACjC,CAAC;IAvBD,sBAAW,qCAAQ;aAAnB;YACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QAC1B,CAAC;aAED,UAAoB,QAAmD;YACnE,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;YAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAChB,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,QAAQ,EAAE;oBAClE,SAAS,EAAE,IAAI,CAAC,KAAK;oBACrB,KAAK,EAAE,IAAI,CAAC,KAAK;iBACpB,CAAC,CAAC;YACP,CAAC;QACL,CAAC;;;OAVA;IAsBL,sBAAC;AAAD,CAAC,AA1CD,IA0CC;AAvCG;IADC,WAAW,CAAC,cAAc,CAAC;;uDACG;AAG/B;IADC,KAAK,EAAE;;8CACO;AAGf;IADC,KAAK,EAAE;;8CACY;AAIpB;IADC,KAAK,EAAE;;kDACyC;AAKjD;IADC,KAAK,EAAE;8BACc,WAAW;qCAIJ,WAAW;+CAFvC;AAcD;IADC,SAAS,CAAC,iBAAiB,EAAE,EAAE,IAAI,EAAE,gBAAgB,EAAE,CAAC;8BAClC,gBAAgB;wDAAC;AAlC/B,eAAe;IAP3B,SAAS,CAAC;QACP,QAAQ,EAAE,mBAAmB;QAC7B,QAAQ,EAAE,+GAGb;KACA,CAAC;qCAqCsC,mBAAmB;GApC9C,eAAe,CA0C3B;SA1CY,eAAe","sourcesContent":["import {\n    Component, ViewChild, ViewContainerRef, Renderer2, ElementRef, HostBinding,\n    Input, TemplateRef\n} from \"@angular/core\";\nimport { ITemplateRefContext, SuiComponentFactory } from \"../../../misc/util/index\";\nimport { IResultContext } from \"./search\";\n\n// See https://github.com/Microsoft/TypeScript/issues/13449.\nconst templateRef = TemplateRef;\n\n@Component({\n    selector: \"sui-search-result\",\n    template: `\n<span #templateSibling></span>\n<span *ngIf=\"!template\" [innerHTML]=\"formatter(value, query)\"></span>\n`\n})\nexport class SuiSearchResult<T> {\n    // Sets the Semantic UI classes on the host element.\n    @HostBinding(\"class.result\")\n    private _optionClasses:boolean;\n\n    @Input()\n    public value:T;\n\n    @Input()\n    public query:string;\n\n    // Returns the label from a given value.\n    @Input()\n    public formatter:(obj:T, query:string) => string;\n\n    private _template?:TemplateRef<IResultContext<T>>;\n\n    @Input()\n    public get template():TemplateRef<IResultContext<T>> | undefined {\n        return this._template;\n    }\n\n    public set template(template:TemplateRef<IResultContext<T>> | undefined) {\n        this._template = template;\n        if (this.template) {\n            this.componentFactory.createView(this.templateSibling, this.template, {\n                $implicit: this.value,\n                query: this.query\n            });\n        }\n    }\n\n    // Placeholder to draw template beside.\n    @ViewChild(\"templateSibling\", { read: ViewContainerRef })\n    public templateSibling:ViewContainerRef;\n\n    constructor(public componentFactory:SuiComponentFactory) {\n        this._optionClasses = true;\n\n        // By default we make this function return an empty string, for the brief moment when it isn't displaying the correct label.\n        this.formatter = value => \"\";\n    }\n}\n"]}