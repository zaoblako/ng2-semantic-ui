{"version":3,"file":"minute-view.js","sourceRoot":"","sources":["../../../../src/modules/datepicker/views/minute-view.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, Renderer2 } from \"@angular/core\";\nimport { Util, DateUtil, DatePrecision } from \"../../../misc/util/index\";\nimport { CalendarView, CalendarViewType } from \"./calendar-view\";\nimport { CalendarItem } from \"../directives/calendar-item\";\nimport { CalendarMode } from \"../services/calendar.service\";\nimport { CalendarRangeService } from \"../services/calendar-range.service\";\nimport { DateParser } from \"../classes/date-parser\";\n\nexport class CalendarRangeMinuteService extends CalendarRangeService {\n    public calcStart(start:Date):Date {\n        return DateUtil.startOf(DatePrecision.Hour, DateUtil.clone(start), true);\n    }\n\n    public calcDates(start:Date):Date[] {\n        return Util.Array\n            .range(this.length)\n            .map(i => DateUtil.add(DatePrecision.Minute, DateUtil.clone(start), i * 5));\n    }\n\n    public configureItem(item:CalendarItem, baseDate:Date):void {\n        item.humanReadable = new DateParser(this.service.localeValues.formats.time, this.service.localeValues).format(item.date);\n        item.isOutsideRange = false;\n    }\n}\n\n@Component({\n    selector: \"sui-calendar-minute-view\",\n    template: `\n<table class=\"ui celled center aligned unstackable table three column minute\">\n<thead>\n    <tr>\n        <th colspan=\"4\">\n            <sui-calendar-view-title [ranges]=\"ranges\" (zoomOut)=\"zoomOut()\">\n                {{ date }}\n            </sui-calendar-view-title>\n        </th>\n    </tr>\n</thead>\n<tbody>\n    <tr *ngFor=\"let group of ranges.current.groupedItems\">\n        <td class=\"link\"\n            *ngFor=\"let item of group\"\n            [calendarItem]=\"item\"\n            (click)=\"setDate(item)\">{{ item.humanReadable }}\n        </td>\n    </tr>\n</tbody>\n</table>\n`\n})\nexport class SuiCalendarMinuteView extends CalendarView {\n    public get date():string {\n        if (this.service.config.mode !== CalendarMode.TimeOnly) {\n            // Set minutes and seconds to 0\n            const dateTimeFormat:string = this.service.localeValues.formats.datetime.replace(/[ms]/g, \"0\");\n            return new DateParser(dateTimeFormat, this.service.localeValues).format(this.currentDate);\n        } else {\n            // Set minutes and seconds to 0\n            const timeFormat:string = this.service.localeValues.formats.time.replace(/[ms]/g, \"0\");\n            return new DateParser(timeFormat, this.service.localeValues).format(this.currentDate);\n        }\n    }\n\n    constructor(renderer:Renderer2) {\n        super(renderer, CalendarViewType.Minute, new CalendarRangeMinuteService(DatePrecision.Hour, 4, 3));\n    }\n}\n"]}