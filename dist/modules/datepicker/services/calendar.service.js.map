{"version":3,"file":"calendar.service.js","sourceRoot":"","sources":["../../../../src/modules/datepicker/services/calendar.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from \"@angular/core\";\nimport { IDatepickerLocaleValues } from \"../../../behaviors/localization/index\";\nimport { DateUtil } from \"../../../misc/util/index\";\nimport { CalendarViewType } from \"../views/calendar-view\";\nimport { CalendarConfig } from \"../classes/calendar-config\";\n\nexport enum CalendarMode {\n    DateOnly = 0,\n    TimeOnly = 1,\n    Both = 2\n}\n\nexport class CalendarService {\n    private _config:CalendarConfig;\n\n    public get config():CalendarConfig {\n        return this._config;\n    }\n\n    public set config(config:CalendarConfig) {\n        this._config = config;\n        config.updateBounds(this._selectedDate || this.currentDate);\n    }\n\n    public currentView:CalendarViewType;\n    public get inFinalView():boolean {\n        return this.currentView === this.config.mappings.finalView;\n    }\n\n    public currentDate:Date;\n    private _selectedDate?:Date;\n\n    public get selectedDate():Date | undefined {\n        return this._selectedDate;\n    }\n\n    public set selectedDate(date:Date | undefined) {\n        if (date) {\n            this._selectedDate = DateUtil.clone(date);\n            this.currentDate = DateUtil.clone(date);\n        } else {\n            this._selectedDate = undefined;\n        }\n\n        this.config.updateBounds(this._selectedDate || this.currentDate);\n        this.onManualUpdate();\n    }\n\n    private _minDate?:Date;\n    private _maxDate?:Date;\n\n    public get minDate():Date | undefined {\n        if (this._minDate && this.config.dateMinBound) {\n            return this._minDate > this.config.dateMinBound ? this._minDate : this.config.dateMinBound;\n        }\n        return this._minDate || this.config.dateMinBound;\n    }\n\n    public set minDate(min:Date | undefined) {\n        this._minDate = min;\n    }\n\n    public get maxDate():Date | undefined {\n        if (this._maxDate && this.config.dateMaxBound) {\n            return this._maxDate < this.config.dateMaxBound ? this._maxDate : this.config.dateMaxBound;\n        }\n        return this._maxDate || this.config.dateMaxBound;\n    }\n\n    public set maxDate(max:Date | undefined) {\n        this._maxDate = max;\n    }\n\n    private _firstDayOfWeek:number;\n\n    public get firstDayOfWeek():number {\n        return this._firstDayOfWeek;\n    }\n\n    public set firstDayOfWeek(firstDayOfWeek:number) {\n        if (firstDayOfWeek != undefined) {\n            this._firstDayOfWeek = Math.max(0, Math.min(6, firstDayOfWeek));\n        }\n    }\n\n    public onDateChange:EventEmitter<Date>;\n\n    constructor(config:CalendarConfig, public localeValues:IDatepickerLocaleValues) {\n        this.config = config;\n\n        this.currentDate = new Date();\n\n        this.firstDayOfWeek = this.localeValues.firstDayOfWeek;\n\n        this.onDateChange = new EventEmitter<Date>();\n\n        this.reset();\n    }\n\n    public onManualUpdate:() => void = () => {};\n\n    public reset():void {\n        this.currentView = this.config.mappings.finalView;\n\n        if (!this._selectedDate) {\n            let current = this.currentDate.getTime();\n            if (this._minDate) {\n                current = Math.max(current, this._minDate.getTime());\n            }\n            if (this._maxDate) {\n                current = Math.min(current, this._maxDate.getTime());\n            }\n\n            this.currentDate = new Date(current);\n            this.config.updateBounds(this.currentDate);\n\n            this.currentView = this.config.mappings.initialView;\n        }\n    }\n\n    public changeDate(date:Date, fromView:CalendarViewType):void {\n        this.currentDate = date;\n\n        if (fromView === this.config.mappings.finalView) {\n            this.selectedDate = date;\n\n            return this.onDateChange.emit(date);\n        }\n\n        this.updateView(this.config.mappings.changed, fromView);\n    }\n\n    public zoomOut(fromView:CalendarViewType):void {\n        this.updateView(this.config.mappings.zoom, fromView);\n    }\n\n    private updateView(mappings:Map<CalendarViewType, CalendarViewType>, fromView:CalendarViewType):void {\n        const mapping = mappings.get(fromView);\n        if (mapping == undefined) {\n            throw new Error(\"Unknown view type.\");\n        }\n        this.currentView = mapping;\n    }\n}\n"]}