{"version":3,"file":"progress.js","sourceRoot":"","sources":["../../../../src/modules/progress/components/progress.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, Input, HostBinding } from \"@angular/core\";\n\n@Component({\n    selector: \"sui-progress\",\n    template: `\n<div class=\"bar\" [style.width.%]=\"percentage\">\n    <div class=\"progress\" *ngIf=\"showProgress\">{{ percentage }}%</div>\n</div>\n<div class=\"label\">\n    <ng-content></ng-content>\n</div>\n`,\n    styles: [`\n.bar {\n    transition-duration: 300ms !important;\n    z-index: 1;\n}\n`]\n})\nexport class SuiProgress {\n    @HostBinding(\"class.ui\")\n    @HostBinding(\"class.progress\")\n    private _popupClasses:boolean = true;\n\n    private _value:number;\n    private _maximum:number;\n    private _precision:number;\n\n    private _overrideSuccess:boolean;\n\n    @Input()\n    public autoSuccess:boolean;\n\n    @Input()\n    public showProgress:boolean;\n\n    @Input()\n    public get value():number {\n        return this._value;\n    }\n\n    public set value(value:number) {\n        // Convert value from string to number where necessary.\n        const converted = +value;\n\n        if (Number.isNaN(converted)) {\n            return;\n        }\n\n        this._value = converted;\n    }\n\n    @Input()\n    public get maximum():number {\n        return this._maximum;\n    }\n\n    public set maximum(value:number) {\n        // Convert value from string to number where necessary.\n        const converted = +value;\n\n        if (Number.isNaN(converted)) {\n            return;\n        }\n\n        this._maximum = converted;\n    }\n\n    @Input()\n    public get precision():number {\n        return this._precision;\n    }\n\n    public set precision(value:number) {\n        // Convert value from string to number where necessary.\n        const converted = +value;\n\n        if (Number.isNaN(converted)) {\n            return;\n        }\n\n        this._precision = Math.min(Math.max(converted, 0), 20);\n    }\n\n    @HostBinding(\"class.success\")\n    private get _reachedMaximum():boolean {\n        return this._overrideSuccess || ((this.value >= this.maximum) && this.autoSuccess);\n    }\n\n    @HostBinding(\"attr.data-percent\")\n    public get percentage():string {\n        const boundedValue = Math.min(Math.max(this.value, 0), this.maximum);\n\n        const percentage = (boundedValue / this.maximum) * 100;\n\n        return percentage.toFixed(this.precision);\n    }\n\n    @Input(\"class\")\n    public set classValue(classes:string) {\n        if (classes.includes(\"attached\") || classes.includes(\"tiny\")) {\n            this.showProgress = false;\n        }\n        if (classes.includes(\"success\")) {\n            this._overrideSuccess = true;\n        }\n    }\n\n    constructor() {\n        this.value = 0;\n        this.maximum = 100;\n        this.precision = 0;\n\n        this._overrideSuccess = false;\n        this.autoSuccess = true;\n        this.showProgress = true;\n\n        this._popupClasses = true;\n    }\n}\n"]}