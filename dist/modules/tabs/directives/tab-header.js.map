{"version":3,"file":"tab-header.js","sourceRoot":"","sources":["../../../../src/modules/tabs/directives/tab-header.ts"],"names":[],"mappings":"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","sourcesContent":["import { HostBinding, Input, Directive, EventEmitter, HostListener, Output } from \"@angular/core\";\n\n@Directive({\n    selector: \"[suiTabHeader]\"\n})\nexport class SuiTabHeader {\n    @HostBinding(\"class.item\")\n    private _headerClasses:boolean;\n\n    @Input(\"suiTabHeader\")\n    public id:string;\n\n    // Internally keeps track of whether the header is active.\n    private _isActive:boolean;\n\n    // Enables use of [(isActive)] so state can be set using booleans.\n    @Output()\n    public isActiveChange:EventEmitter<boolean>;\n\n    // Fires only when `isActive` changes due to user input.\n    public isActiveExternalChange:EventEmitter<boolean>;\n\n    // Fires whenever a tab is activated having previously been deactivated.\n    @Output(\"activate\")\n    public onActivate:EventEmitter<void>;\n\n    // Fires whenever a tab is deactivated having previously been activated.\n    @Output(\"deactivate\")\n    public onDeactivate:EventEmitter<void>;\n\n    @HostBinding(\"class.active\")\n    @Input()\n    public get isActive():boolean {\n        return this._isActive;\n    }\n\n    public set isActive(active:boolean) {\n        let isActive = active;\n        // Only used by @Input(), runs whenever user input changes `isActive`.\n        // Run in timeout because `isDisabled` can prohibit user from changing `isActive`.\n        // so update is delayed to avoid 'changed after checked' error.\n        setTimeout(() => {\n            // Only allow change if tab header is not disabled.\n            isActive = !this.isDisabled ? active : false;\n            this.setActiveState(isActive);\n\n            // Fire 'external change' event as user input has occured.\n            this.isActiveExternalChange.emit(isActive);\n        });\n    }\n\n    private _isDisabled:boolean;\n\n    @HostBinding(\"class.disabled\")\n    @Input()\n    public get isDisabled():boolean {\n        return this._isDisabled;\n    }\n\n    public set isDisabled(disabled:boolean) {\n        // Only update if value provided is different to current one.\n        if (this._isDisabled !== disabled) {\n            this._isDisabled = disabled;\n\n            // If now disabled, then tab header must be deactivated.\n            if (this.isDisabled) {\n                this.isActive = false;\n            }\n        }\n    }\n\n    constructor() {\n        this._isActive = false;\n        this.isActiveChange = new EventEmitter<boolean>();\n        this.isActiveExternalChange = new EventEmitter<boolean>();\n\n        this.onActivate = new EventEmitter<void>();\n        this.onDeactivate = new EventEmitter<void>();\n\n        this.isDisabled = false;\n\n        this._headerClasses = true;\n    }\n\n    // Internally update active state.\n    public setActiveState(active:boolean):void {\n        // If (cast) active value has changed:\n        if (!!this._isActive !== active) {\n            // Update to the new value.\n            this._isActive = active;\n\n            // Fire the appropriate activation event.\n            if (active) {\n                this.onActivate.emit();\n            } else {\n                this.onDeactivate.emit();\n            }\n        }\n\n        // Regardless, emit a change to `isActive`, so [(isActive)] works correctly.\n        this.isActiveChange.emit(active);\n    }\n\n    @HostListener(\"click\")\n    private onClick():void {\n        if (!this.isDisabled) {\n            // Activate the tab when clicked, so long as it isn't disabled.\n            this.isActive = true;\n        }\n    }\n}\n"]}