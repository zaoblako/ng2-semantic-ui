{"version":3,"file":"modal-config.js","sourceRoot":"","sources":["../../../../src/modules/modal/classes/modal-config.ts"],"names":[],"mappings":";;;;;;;;;;AAKA,MAAM,CAAC,IAAM,SAAS,GAAG;IACrB,IAAI,EAAE,MAAmB;IACzB,IAAI,EAAE,MAAmB;IACzB,KAAK,EAAE,OAAoB;IAC3B,MAAM,EAAE,QAAqB;IAC7B,KAAK,EAAE,OAAoB;CAC9B,CAAC;AAEF,2DAA2D;AAC3D;IA0BI,qBAAY,OAAiC,EAAE,UAAyB;QAA5D,wBAAA,EAAA,mBAAiC;QAAE,2BAAA,EAAA,iBAAyB;QACpE,kCAAkC;QAClC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QAEvB,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,MAAM,CAAC;QAC7B,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC1B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QAExB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QAExB,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC;QAC1B,IAAI,CAAC,kBAAkB,GAAG,GAAG,CAAC;IAClC,CAAC;IACL,kBAAC;AAAD,CAAC,AAzCD,IAyCC;;AAED,mDAAmD;AACnD;IAA0E,uCAAoB;IAG1F,6BAAY,QAA+B,EAAE,OAAiC,EAAE,UAAyB;QAA5D,wBAAA,EAAA,mBAAiC;QAAE,2BAAA,EAAA,iBAAyB;QAAzG,YACI,kBAAM,OAAO,EAAE,UAAU,CAAC,SAG7B;QADG,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;;IAC7B,CAAC;IACL,0BAAC;AAAD,CAAC,AARD,CAA0E,WAAW,GAQpF;;AAED,yDAAyD;AACzD;IAA2E,wCAAoB;IAG3F,8BAAY,SAAmB,EAAE,OAAiC,EAAE,UAAyB;QAA5D,wBAAA,EAAA,mBAAiC;QAAE,2BAAA,EAAA,iBAAyB;QAA7F,YACI,kBAAM,OAAO,EAAE,UAAU,CAAC,SAG7B;QADG,KAAI,CAAC,SAAS,GAAG,SAAS,CAAC;;IAC/B,CAAC;IACL,2BAAC;AAAD,CAAC,AARD,CAA2E,WAAW,GAQrF","sourcesContent":["import { Type } from \"@angular/core\";\nimport { ModalTemplate } from \"./modal-template\";\n\nexport type ModalSize = \"mini\" | \"tiny\" | \"small\" | \"normal\" | \"large\";\n\nexport const ModalSize = {\n    Mini: \"mini\" as ModalSize,\n    Tiny: \"tiny\" as ModalSize,\n    Small: \"small\" as ModalSize,\n    Normal: \"normal\" as ModalSize,\n    Large: \"large\" as ModalSize\n};\n\n// Stores a basic set of configuration options for a modal.\nexport class ModalConfig<T, U = undefined, V = undefined> {\n    // Determines whether the modal can be closed with a close button, clicking outside, or the escape key.\n    public isClosable:boolean;\n    // Value to deny with when closing via `isClosable`.\n    public closeResult:V;\n\n    // Data to pass to the modal instance when opened.\n    public context?:T;\n\n    // Size used to display the modal.\n    public size:ModalSize;\n    // Whether the modal takes up the full width of the screen.\n    public isFullScreen:boolean;\n    // Whether or not the modal has basic styles applied.\n    public isBasic:boolean;\n    // Whether the modal shows against a light background.\n    public isInverted:boolean;\n\n    // Whether or not the modal should always display a scrollbar.\n    public mustScroll:boolean;\n\n    // Transition to display modal with.\n    public transition:string;\n    // Duration of the modal & dimmer transitions.\n    public transitionDuration:number;\n\n    constructor(context:T | undefined = undefined, isClosable:boolean = true) {\n        // Initialise with default values.\n        this.isClosable = isClosable;\n        this.context = context;\n\n        this.size = ModalSize.Normal;\n        this.isFullScreen = false;\n        this.isBasic = false;\n        this.isInverted = false;\n\n        this.mustScroll = false;\n\n        this.transition = \"scale\";\n        this.transitionDuration = 500;\n    }\n}\n\n// Used when creating a modal from a `TemplateRef`.\nexport class TemplateModalConfig<T, U = undefined, V = undefined> extends ModalConfig<T, U, V> {\n    public template:ModalTemplate<T, U, V>;\n\n    constructor(template:ModalTemplate<T, U, V>, context:T | undefined = undefined, isClosable:boolean = true) {\n        super(context, isClosable);\n\n        this.template = template;\n    }\n}\n\n// Used when creating a modal from an existing component.\nexport class ComponentModalConfig<T, U = undefined, V = undefined> extends ModalConfig<T, U, V> {\n    public component:Type<any>;\n\n    constructor(component:Type<any>, context:T | undefined = undefined, isClosable:boolean = true) {\n        super(context, isClosable);\n\n        this.component = component;\n    }\n}\n"]}