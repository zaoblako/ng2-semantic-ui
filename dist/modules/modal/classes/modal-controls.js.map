{"version":3,"file":"modal-controls.js","sourceRoot":"","sources":["../../../../src/modules/modal/classes/modal-controls.ts"],"names":[],"mappings":";;;;;;;;;;AAGA,0DAA0D;AAC1D;IACI,uBAAY,OAAsB,EAAE,IAAmB;QACnD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;IAED,yFAAyF;IAClF,+BAAO,GAAd,UAAe,MAAQ,IAAQ,CAAC;IACzB,4BAAI,GAAX,UAAY,MAAQ,IAAQ,CAAC;IACjC,oBAAC;AAAD,CAAC,AATD,IASC;;AAED,wGAAwG;AACxG;IAA4D,yBAAmB;IAG3E,eAAY,QAA4B,EAAE,OAAS;QAAnD;QACI,+EAA+E;QAC/E,yEAAyE;QACzE,kBAAM,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,IAAI,CAAC,SAGzC;QADG,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;;IAC3B,CAAC;IACL,YAAC;AAAD,CAAC,AAVD,CAA4D,aAAa,GAUxE","sourcesContent":["// Shorthand to avoid writing arrow types everywhere.\nexport type ModalResult<T> = (result:T) => void;\n\n// Used to pass ability to control a modal to a component.\nexport class ModalControls<T, U> {\n    constructor(approve:ModalResult<T>, deny:ModalResult<U>) {\n        this.approve = approve;\n        this.deny = deny;\n    }\n\n    // Use method here rather than arrow variables to make intellisense show they're methods.\n    public approve(result:T):void {}\n    public deny(result:U):void {}\n}\n\n// Injected into custom modal components, to allow control of the modal, and access to a context object.\nexport class Modal<T, U = undefined, V = undefined> extends ModalControls<U, V> {\n    public context:T;\n\n    constructor(controls:ModalControls<U, V>, context:T) {\n        // Instances of `ModalControls` are only created in the `SuiModal` constructor,\n        // so we take an initialised instance rather than remaking one each time.\n        super(controls.approve, controls.deny);\n\n        this.context = context;\n    }\n}\n"]}