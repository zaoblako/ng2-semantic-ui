{"version":3,"file":"modal.service.js","sourceRoot":"","sources":["../../../../src/modules/modal/services/modal.service.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,mBAAmB,EAAE,MAAM,0BAA0B,CAAC;AAC/D,OAAO,EAAe,mBAAmB,EAAE,oBAAoB,EAAE,MAAM,yBAAyB,CAAC;AACjG,OAAO,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAC/C,OAAO,EAAE,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAClD,OAAO,EAAE,WAAW,EAAE,MAAM,yBAAyB,CAAC;AAGtD,IAAa,eAAe;IACxB,yBAAoB,iBAAqC;QAArC,sBAAiB,GAAjB,iBAAiB,CAAoB;IAAG,CAAC;IAEtD,8BAAI,GAAX,UAAqB,KAA0B;QAC3C,4CAA4C;QAC5C,IAAM,YAAY,GAAG,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAiB,QAAQ,CAAC,CAAC;QAEtF,sDAAsD;QACtD,IAAM,cAAc,GAAG,YAAY,CAAC,QAAQ,CAAC;QAE7C,EAAE,CAAC,CAAC,KAAK,YAAY,mBAAmB,CAAC,CAAC,CAAC;YACvC,qCAAqC;YACrC,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,cAAc,CAAC,eAAe,EAAE,KAAK,CAAC,QAAQ,EAAE;gBAC9E,gBAAgB;gBAChB,SAAS,EAAE,KAAK,CAAC,OAAO;gBACxB,sBAAsB;gBACtB,KAAK,EAAE,YAAY,CAAC,QAAQ,CAAC,QAAQ;aACxC,CAAC,CAAC;QACP,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,YAAY,oBAAoB,CAAC,CAAC,CAAC;YAC/C,0DAA0D;YAC1D,4EAA4E;YAC5E,IAAM,mBAAmB,GAAG,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAC9D,KAAK,CAAC,SAAS,EACf;gBACI;oBACI,OAAO,EAAE,KAAK;oBACd,QAAQ,EAAE,IAAI,KAAK,CAAC,cAAc,CAAC,QAAQ,EAAE,KAAK,CAAC,OAAO,CAAC;iBAC9D;aACJ,CACJ,CAAC;YAEF,0DAA0D;YAC1D,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,mBAAmB,EAAE,cAAc,CAAC,eAAe,CAAC,CAAC;YAEzF,+DAA+D;YAC/D,IAAM,cAAc,GAAG,mBAAmB,CAAC,QAAQ,CAAC,aAAwB,CAAC;YAE7E,+EAA+E;YAC/E,yGAAyG;YACzG,6CAA6C;YAC7C,OAAO,cAAc,CAAC,aAAa,EAAE,IAAI,cAAc,CAAC,aAAa,IAAI,cAAc,CAAC,UAAU,EAAE,CAAC;gBACjG,cAAc,CAAC,aAAa,CAAC,WAAW,CAAC,cAAc,CAAC,WAAW,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC;YACpG,CAAC;YACD,+DAA+D;YAC/D,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,CAAC;QACnE,CAAC;QAED,qDAAqD;QACrD,4EAA4E;QAC5E,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;QAEzD,2DAA2D;QAC3D,cAAc,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAEjC,iFAAiF;QACjF,MAAM,CAAC,IAAI,WAAW,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;IAChD,CAAC;IACL,sBAAC;AAAD,CAAC,AAzDD,IAyDC;AAzDY,eAAe;IAD3B,UAAU,EAAE;qCAE6B,mBAAmB;GADhD,eAAe,CAyD3B;SAzDY,eAAe","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { SuiComponentFactory } from \"../../../misc/util/index\";\nimport { ModalConfig, TemplateModalConfig, ComponentModalConfig } from \"../classes/modal-config\";\nimport { SuiModal } from \"../components/modal\";\nimport { Modal } from \"../classes/modal-controls\";\nimport { ActiveModal } from \"../classes/active-modal\";\n\n@Injectable()\nexport class SuiModalService {\n    constructor(private _componentFactory:SuiComponentFactory) {}\n\n    public open<T, U, V>(modal:ModalConfig<T, U, V>):ActiveModal<T, U, V> {\n        // Generate the modal component to be shown.\n        const componentRef = this._componentFactory.createComponent<SuiModal<U, V>>(SuiModal);\n\n        // Shorthand for the created modal component instance.\n        const modalComponent = componentRef.instance;\n\n        if (modal instanceof TemplateModalConfig) {\n            // Inject the template into the view.\n            this._componentFactory.createView(modalComponent.templateSibling, modal.template, {\n                // `let-context`\n                $implicit: modal.context,\n                // `let-modal=\"modal\"`\n                modal: componentRef.instance.controls\n            });\n        } else if (modal instanceof ComponentModalConfig) {\n            // Generate the component to be used as the modal content,\n            // injecting an instance of `Modal` to be used in the component constructor.\n            const contentComponentRef = this._componentFactory.createComponent(\n                modal.component,\n                [\n                    {\n                        provide: Modal,\n                        useValue: new Modal(modalComponent.controls, modal.context)\n                    }\n                ]\n            );\n\n            // Insert the new component into the content of the modal.\n            this._componentFactory.attachToView(contentComponentRef, modalComponent.templateSibling);\n\n            // Shorthand for access to the content component's DOM element.\n            const contentElement = contentComponentRef.location.nativeElement as Element;\n\n            // Move all of the DOM elements inside the component to the main modal element.\n            // This is done so that CSS classes apply correctly. It does stop any custom styles from working however,\n            // so other ways may have to be investigated.\n            while (contentElement.hasChildNodes() && contentElement.parentElement && contentElement.firstChild) {\n                contentElement.parentElement.appendChild(contentElement.removeChild(contentElement.firstChild));\n            }\n            // Remove the generated component's 'empty shell' from the DOM.\n            this._componentFactory.detachFromDocument(contentComponentRef);\n        }\n\n        // Attach the new modal component to the application.\n        // The component will move itself to the document body for correctl styling.\n        this._componentFactory.attachToApplication(componentRef);\n\n        // Initialise the generated modal with the provided config.\n        modalComponent.loadConfig(modal);\n\n        // Return an instance of an `ActiveModal`, so the user can control the new modal.\n        return new ActiveModal(modal, componentRef);\n    }\n}\n"]}