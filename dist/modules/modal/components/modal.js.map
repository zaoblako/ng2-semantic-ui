{"version":3,"file":"modal.js","sourceRoot":"","sources":["../../../../src/modules/modal/components/modal.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Component, Input, OnInit, ViewChild, ElementRef, Renderer2,\n    EventEmitter, Output, HostListener, ViewContainerRef, AfterViewInit\n} from \"@angular/core\";\nimport { Util, IDynamicClasses, KeyCode, SuiComponentFactory } from \"../../../misc/util/index\";\nimport { TransitionController, Transition, TransitionDirection } from \"../../transition/index\";\nimport { ModalControls, ModalResult } from \"../classes/modal-controls\";\nimport { ModalConfig, ModalSize } from \"../classes/modal-config\";\n\n@Component({\n    selector: \"sui-modal\",\n    template: `\n<!-- Page dimmer for modal background. -->\n<sui-dimmer class=\"page\"\n            [class.inverted]=\"isInverted\"\n            [(isDimmed)]=\"dimBackground\"\n            [isClickable]=\"false\"\n            [transitionDuration]=\"transitionDuration\"\n            [wrapContent]=\"false\"\n            (click)=\"close()\">\n\n    <!-- Modal component, with transition component attached -->\n    <div class=\"ui modal\"\n         [suiTransition]=\"transitionController\"\n         [class.active]=\"transitionController?.isVisible\"\n         [class.fullscreen]=\"isFullScreen\"\n         [class.basic]=\"isBasic\"\n         [class.scroll]=\"mustScroll\"\n         [class.inverted]=\"isInverted\"\n         [ngClass]=\"dynamicClasses\"\n         (click)=\"onClick($event)\"\n         #modal>\n\n        <!-- Configurable close icon -->\n        <i class=\"close icon\" *ngIf=\"isClosable\" (click)=\"close()\"></i>\n        <!-- <ng-content> so that <sui-modal> can be used as a normal component. -->\n        <ng-content></ng-content>\n        <!-- @ViewChild reference so we can insert elements beside this div. -->\n        <div #templateSibling></div>\n    </div>\n</sui-dimmer>\n`,\n    styles: [`\n.ui.dimmer {\n    overflow-y: auto;\n}\n\n/* avoid .scrolling as Semantic UI adds unwanted styles. */\n.scroll {\n    position: absolute !important;\n    margin-top: 3.5rem !important;\n    margin-bottom: 3.5rem !important;\n    top: 0;\n}\n`]\n})\nexport class SuiModal<T, U> implements OnInit, AfterViewInit {\n    @Input()\n    // Determines whether the modal can be closed with a close button, clicking outside, or the escape key.\n    public isClosable:boolean;\n\n    @Input()\n    // Value to deny with when closing via `isClosable`.\n    public closeResult:U;\n\n    // Separate class for the `approve` and `deny` methods to support passing into components.\n    public controls:ModalControls<T, U>;\n\n    public get approve():ModalResult<T> {\n        return this.controls.approve;\n    }\n\n    public get deny():ModalResult<U> {\n        return this.controls.deny;\n    }\n\n    // Fires when the modal closes, after `approve` has been called.\n    @Output(\"approved\")\n    public onApprove:EventEmitter<T>;\n\n    // Fires when the modal closes, after `deny` has been called.\n    @Output(\"denied\")\n    public onDeny:EventEmitter<U>;\n\n    // Fires when the modal closes.\n    @Output(\"dismissed\")\n    public onDismiss:EventEmitter<void>;\n\n    @ViewChild(\"modal\")\n    private _modalElement:ElementRef;\n\n    // Size used to display the modal.\n    @Input()\n    public size:ModalSize;\n\n    // Whether the modal takes up the full width of the screen.\n    private _isFullScreen:boolean;\n\n    // Value to deny with when closing via `isClosable`.\n    @Input()\n    public get isFullScreen():boolean {\n        return this._isFullScreen;\n    }\n\n    public set isFullScreen(fullScreen:boolean) {\n        this._isFullScreen = Util.DOM.parseBooleanAttribute(fullScreen);\n    }\n\n    // Whether or not the modal has basic styles applied.\n    @Input()\n    public isBasic:boolean;\n\n    // Whether the modal currently is displaying a scrollbar.\n    private _mustScroll:boolean;\n    // Whether or not the modal should always display a scrollbar.\n    private _mustAlwaysScroll:boolean;\n\n    @Input()\n    public get mustScroll():boolean {\n        return this._mustScroll;\n    }\n\n    public set mustScroll(mustScroll:boolean) {\n        this._mustScroll = mustScroll;\n        // 'Cache' value in _mustAlwaysScroll so that if `true`, _mustScroll isn't ever auto-updated.\n        this._mustAlwaysScroll = mustScroll;\n        this.updateScroll();\n    }\n\n    // Whether the modal shows against a light background.\n    private _isInverted:boolean;\n\n    @Input()\n    public get isInverted():boolean {\n        return this._isInverted;\n    }\n\n    public set isInverted(inverted:boolean) {\n        this._isInverted = Util.DOM.parseBooleanAttribute(inverted);\n    }\n\n    public transitionController:TransitionController;\n\n    // Transition to display modal with.\n    @Input()\n    public transition:string;\n\n    // Duration of the modal & dimmer transitions.\n    @Input()\n    public transitionDuration:number;\n\n    // Whether or not the backround dimmer is active.\n    public dimBackground:boolean;\n    // True after `approve` or `deny` has been called.\n    private _isClosing:boolean;\n\n    // `ViewContainerRef` for the element the template gets injected as a sibling of.\n    @ViewChild(\"templateSibling\", { read: ViewContainerRef })\n    public templateSibling:ViewContainerRef;\n\n    // Parent element of modal before relocation to document body.\n    private _originalContainer?:Element;\n\n    public get dynamicClasses():IDynamicClasses {\n        const classes:IDynamicClasses = {};\n        if (this.size) {\n            classes[this.size] = true;\n        }\n        return classes;\n    }\n\n    constructor(private _renderer:Renderer2, private _element:ElementRef, private _componentFactory:SuiComponentFactory) {\n        // Initialise with default configuration from `ModalConfig` (to avoid writing defaults twice).\n        const config = new ModalConfig<undefined, T, U>();\n        this.loadConfig(config);\n\n        // Event emitters for each of the possible modal outcomes.\n        this.onApprove = new EventEmitter<T>();\n        this.onDeny = new EventEmitter<U>();\n        this.onDismiss = new EventEmitter<void>();\n\n        // Initialise controls with actions for the `approve` and `deny` cases.\n        this.controls = new ModalControls<T, U>(\n            res => this.dismiss(() => this.onApprove.emit(res)),\n            res => this.dismiss(() => this.onDeny.emit(res)));\n\n        // Internal variable initialisation.\n        this.dimBackground = false;\n        this._isClosing = false;\n        this.transitionController = new TransitionController(false);\n    }\n\n    public ngOnInit():void {\n        // Transition the modal to be visible.\n        this.transitionController.animate(new Transition(this.transition, this.transitionDuration, TransitionDirection.In));\n        setTimeout(() => this.dimBackground = true);\n    }\n\n    public ngAfterViewInit():void {\n        // Move the modal to the document body to ensure correct scrolling.\n        this._originalContainer = this._element.nativeElement.parentNode;\n        document.querySelector(\"body\")!.appendChild(this._element.nativeElement);\n        // Remove the #templateSibling element from the DOM to fix bottom border styles.\n        const templateElement = this.templateSibling.element.nativeElement as Element;\n        if (templateElement.parentNode) {\n            templateElement.parentNode.removeChild(templateElement);\n        }\n\n        // Update margin offset to center modal correctly on-screen.\n        const element = this._modalElement.nativeElement as Element;\n        setTimeout(() => {\n            this._renderer.setStyle(element, \"margin-top\", `-${element.clientHeight / 2}px`);\n            this.updateScroll();\n        });\n\n        // Focus any element with [autofocus] attribute.\n        const autoFocus = element.querySelector(\"[autofocus]\") as HTMLElement | null;\n        if (autoFocus) {\n            // Autofocus after the browser has had time to process other event handlers.\n            setTimeout(() => autoFocus.focus(), 10);\n            // Try to focus again when the modal has opened so that autofocus works in IE11.\n            setTimeout(() => autoFocus.focus(), this.transitionDuration);\n        }\n    }\n\n    // Updates the modal with the specified configuration.\n    public loadConfig<V>(config:ModalConfig<V, T, U>):void {\n        this.isClosable = config.isClosable;\n        this.closeResult = config.closeResult;\n\n        this.size = config.size;\n        this.isFullScreen = config.isFullScreen;\n        this.isBasic = config.isBasic;\n        this.isInverted = config.isInverted;\n\n        this.mustScroll = config.mustScroll;\n\n        this.transition = config.transition;\n        this.transitionDuration = config.transitionDuration;\n    }\n\n    // Dismisses the modal with a transition, firing the callback after the modal has finished transitioning.\n    private dismiss(callback:() => void = () => {}):void {\n        // If we aren't currently closing,\n        if (!this._isClosing) {\n            this._isClosing = true;\n\n            // Transition the modal to be invisible.\n            this.dimBackground = false;\n            this.transitionController.stopAll();\n            this.transitionController.animate(\n                new Transition(this.transition, this.transitionDuration, TransitionDirection.Out, () => {\n                    // When done, move the modal back to its original location, emit a dismiss event, and fire the callback.\n                    if (this._originalContainer) {\n                        this._originalContainer.appendChild(this._element.nativeElement);\n                    }\n                    this.onDismiss.emit();\n                    callback();\n                }));\n        }\n    }\n\n    // Closes the modal with a 'deny' outcome, using the specified default reason.\n    public close():void {\n        if (this.isClosable) {\n            // If we are allowed to close, fire the deny result with the default value.\n            this.deny(this.closeResult);\n        }\n    }\n\n    // Decides whether the modal needs to reposition to allow scrolling.\n    private updateScroll():void {\n        // Semantic UI modal margin is 3.5rem, which is relative to the global font size, so for compatibility:\n        const fontSize = parseFloat(window.getComputedStyle(document.documentElement).getPropertyValue(\"font-size\"));\n        const margin = fontSize * 3.5;\n\n        // _mustAlwaysScroll works by stopping _mustScroll from being automatically updated, so it stays `true`.\n        if (!this._mustAlwaysScroll && this._modalElement) {\n            const element = this._modalElement.nativeElement as Element;\n\n            // The modal must scroll if the window height is smaller than the modal height + both margins.\n            this._mustScroll = window.innerHeight < element.clientHeight + margin * 2;\n        }\n    }\n\n    public onClick(e:MouseEvent):void {\n        // Makes sense here, as the modal shouldn't be attached to any DOM element.\n        e.stopPropagation();\n    }\n\n    // Document listener is fine here because nobody will enough modals open.\n    @HostListener(\"document:keyup\", [\"$event\"])\n    public onDocumentKeyUp(e:KeyboardEvent):void {\n        if (e.keyCode === KeyCode.Escape) {\n            // Close automatically covers case of `!isClosable`, so check not needed.\n            this.close();\n        }\n    }\n\n    @HostListener(\"window:resize\")\n    public onDocumentResize():void {\n        this.updateScroll();\n    }\n}\n"]}