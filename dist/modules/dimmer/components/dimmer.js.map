{"version":3,"file":"dimmer.js","sourceRoot":"","sources":["../../../../src/modules/dimmer/components/dimmer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EACH,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,WAAW,EAAE,YAAY,EAAE,YAAY,EAAE,SAAS,EAC5E,UAAU,EAAE,iBAAiB,EAChC,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,oBAAoB,EAAE,aAAa,EAAE,mBAAmB,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAC;AAiB9G,IAAa,SAAS;IAAS,6BAAa;IAmDxC,mBAAY,QAAkB,EAAE,OAAkB,EAAE,cAAgC;QAApF,YACI,kBAAM,QAAQ,EAAE,OAAO,EAAE,cAAc,CAAC,SAS3C;QAPG,KAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,KAAI,CAAC,cAAc,GAAG,IAAI,YAAY,EAAW,CAAC;QAClD,KAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAExB,KAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAExB,KAAI,CAAC,cAAc,GAAG,IAAI,CAAC;;IAC/B,CAAC;IAlDD,sBAAW,+BAAQ;aAAnB;YACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QAC1B,CAAC;aAED,UAAoB,KAAa;YAC7B,IAAM,QAAQ,GAAG,CAAC,CAAC,KAAK,CAAC;YAEzB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;gBAC9B,6GAA6G;gBAC7G,IAAI,CAAC,qBAAqB,GAAG,IAAI,oBAAoB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;gBAEzE,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;gBAEzD,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;YAC9B,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAErC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;gBAE1B,IAAI,CAAC,qBAAqB,CAAC,OAAO,EAAE,CAAC;gBACrC,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAC9B,IAAI,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,kBAAkB,EAAE,QAAQ,GAAG,mBAAmB,CAAC,EAAE,GAAG,mBAAmB,CAAC,GAAG,CAAC,CAAC,CAAC;YACtH,CAAC;QACL,CAAC;;;OApBA;IAmDO,2BAAO,GAAf;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YACtB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC5C,CAAC;IACL,CAAC;IACL,gBAAC;AAAD,CAAC,AAtED,CAA+B,aAAa,GAsE3C;AAnEG;IAFC,WAAW,CAAC,UAAU,CAAC;IACvB,WAAW,CAAC,cAAc,CAAC;;iDACG;AAQ/B;IAFC,WAAW,CAAC,cAAc,CAAC;IAC3B,KAAK,EAAE;;;yCAGP;AAuBD;IADC,MAAM,EAAE;8BACa,YAAY;iDAAU;AAG5C;IADC,KAAK,EAAE;;8CACmB;AAG3B;IADC,KAAK,EAAE;;6CACiB;AAGzB;IADC,KAAK,EAAE;;qDACyB;AAIjC;IADC,KAAK,EAAE;;8CACmB;AAe3B;IADC,YAAY,CAAC,OAAO,CAAC;;;;wCAMrB;AArEQ,SAAS;IAfrB,SAAS,CAAC;QACP,QAAQ,EAAE,YAAY;QACtB,QAAQ,EAAE,4IAMb;QACG,MAAM,EAAE,CAAC,8CAIZ,CAAC;KACD,CAAC;qCAoDuB,SAAS,EAAU,UAAU,EAAiB,iBAAiB;GAnD3E,SAAS,CAsErB;SAtEY,SAAS","sourcesContent":["import {\n    Component, Input, Output, HostBinding, HostListener, EventEmitter, Renderer2,\n    ElementRef, ChangeDetectorRef\n} from \"@angular/core\";\nimport { TransitionController, SuiTransition, TransitionDirection, Transition } from \"../../transition/index\";\n\n@Component({\n    selector: \"sui-dimmer\",\n    template: `\n<div [class.content]=\"wrapContent\">\n    <div [class.center]=\"wrapContent\">\n        <ng-content></ng-content>\n    </div>\n</div>\n`,\n    styles: [`\n:host.dimmer {\n    transition: none;\n}\n`]\n})\nexport class SuiDimmer extends SuiTransition {\n    @HostBinding(\"class.ui\")\n    @HostBinding(\"class.dimmer\")\n    private _dimmerClasses:boolean;\n\n    private _transitionController:TransitionController;\n\n    private _isDimmed:boolean;\n\n    @HostBinding(\"class.active\")\n    @Input()\n    public get isDimmed():boolean {\n        return this._isDimmed;\n    }\n\n    public set isDimmed(value:boolean) {\n        const isDimmed = !!value;\n\n        if (!this._transitionController) {\n            // Initialise transition functionality when first setting dimmed, to ensure initial state doesn't transition.\n            this._transitionController = new TransitionController(isDimmed, \"block\");\n\n            this.setTransitionController(this._transitionController);\n\n            this._isDimmed = isDimmed;\n        } else if (this._isDimmed !== isDimmed) {\n\n            this._isDimmed = isDimmed;\n\n            this._transitionController.stopAll();\n            this._transitionController.animate(\n                new Transition(\"fade\", this.transitionDuration, isDimmed ? TransitionDirection.In : TransitionDirection.Out));\n        }\n    }\n\n    @Output()\n    public isDimmedChange:EventEmitter<boolean>;\n\n    @Input()\n    public isClickable:boolean;\n\n    @Input()\n    public transition:string;\n\n    @Input()\n    public transitionDuration:number;\n\n    /* Internal for now */\n    @Input()\n    public wrapContent:boolean;\n\n    constructor(renderer:Renderer2, element:ElementRef, changeDetector:ChangeDetectorRef) {\n        super(renderer, element, changeDetector);\n\n        this._isDimmed = false;\n        this.isDimmedChange = new EventEmitter<boolean>();\n        this.isClickable = true;\n\n        this.wrapContent = true;\n\n        this._dimmerClasses = true;\n    }\n\n    @HostListener(\"click\")\n    private onClick():void {\n        if (this.isClickable) {\n            this.isDimmed = false;\n            this.isDimmedChange.emit(this.isDimmed);\n        }\n    }\n}\n"]}