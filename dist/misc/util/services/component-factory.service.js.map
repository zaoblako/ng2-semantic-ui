{"version":3,"file":"component-factory.service.js","sourceRoot":"","sources":["../../../../src/misc/util/services/component-factory.service.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACH,UAAU,EAAE,cAAc,EAAE,wBAAwB,EAAE,QAAQ,EAC9D,kBAAkB,EACrB,MAAM,eAAe,CAAC;AAOvB,IAAa,mBAAmB;IAC5B,6BAAoB,eAA8B,EAC9B,yBAAkD,EAClD,SAAkB;QAFlB,oBAAe,GAAf,eAAe,CAAe;QAC9B,8BAAyB,GAAzB,yBAAyB,CAAyB;QAClD,cAAS,GAAT,SAAS,CAAS;IAAG,CAAC;IAEnC,6CAAe,GAAtB,UAA0B,IAAY,EAAE,SAAyB;QAAzB,0BAAA,EAAA,cAAyB;QAC7D,4DAA4D;QAC5D,IAAM,OAAO,GAAG,IAAI,CAAC,yBAAyB,CAAC,uBAAuB,CAAC,IAAe,CAAC,CAAC;QAExF,+DAA+D;QAC/D,IAAM,QAAQ,GAAG,kBAAkB,CAAC,gBAAgB,CAChD,SAAS,EACT,IAAI,CAAC,SAAS,CACjB,CAAC;QAEF,uEAAuE;QACvE,IAAM,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAE9C,MAAM,CAAC,YAAY,CAAC;IACxB,CAAC;IAEM,wCAAU,GAAjB,UAAoD,aAA8B,EAAE,QAAuB,EAAE,OAAS;QAClH,aAAa,CAAC,kBAAkB,CAAI,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC3D,CAAC;IAED,2DAA2D;IACpD,0CAAY,GAAnB,UAAuB,YAA4B,EAAE,aAA8B;QAC/E,aAAa,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC;IAED,sDAAsD;IAC/C,iDAAmB,GAA1B,UAA8B,YAA4B;QACtD,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;IAC3D,CAAC;IAED,yDAAyD;IAClD,mDAAqB,GAA5B,UAAgC,YAA4B;QACxD,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;IAC3D,CAAC;IAED,oDAAoD;IAC7C,2CAAa,GAApB,UAAwB,YAA4B,EAAE,OAAe;QACjE,OAAO,CAAC,WAAW,CAAC,YAAY,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;IAC7D,CAAC;IAED,4CAA4C;IACrC,gDAAkB,GAAzB,UAA6B,YAA4B;QACrD,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAE,CAAC,CAAC;IACtE,CAAC;IAEM,gDAAkB,GAAzB,UAA6B,YAA4B;QACrD,IAAM,OAAO,GAAG,YAAY,CAAC,QAAQ,CAAC,aAAwB,CAAC;QAC/D,+DAA+D;QAC/D,EAAE,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;YACrB,OAAO,CAAC,UAAU,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAC5C,CAAC;IACL,CAAC;IACL,0BAAC;AAAD,CAAC,AAzDD,IAyDC;AAzDY,mBAAmB;IAD/B,UAAU,EAAE;qCAE2B,cAAc;QACJ,wBAAwB;QACxC,QAAQ;GAH7B,mBAAmB,CAyD/B;SAzDY,mBAAmB","sourcesContent":["import {\n    Injectable, ApplicationRef, ComponentFactoryResolver, Injector, ComponentRef,\n    ReflectiveInjector, Provider, Type, ViewContainerRef, TemplateRef\n} from \"@angular/core\";\n\nexport interface IImplicitContext<T> {\n    $implicit?:T;\n}\n\n@Injectable()\nexport class SuiComponentFactory {\n    constructor(private _applicationRef:ApplicationRef,\n                private _componentFactoryResolver:ComponentFactoryResolver,\n                private _injector:Injector) {}\n\n    public createComponent<T>(type:Type<T>, providers:Provider[] = []):ComponentRef<T> {\n        // Resolve a factory for creating components of type `type`.\n        const factory = this._componentFactoryResolver.resolveComponentFactory(type as Type<T>);\n\n        // Resolve and create an injector with the specified providers.\n        const injector = ReflectiveInjector.resolveAndCreate(\n            providers,\n            this._injector\n        );\n\n        // Create a component using the previously resolved factory & injector.\n        const componentRef = factory.create(injector);\n\n        return componentRef;\n    }\n\n    public createView<T, U extends IImplicitContext<T>>(viewContainer:ViewContainerRef, template:TemplateRef<U>, context:U):void {\n        viewContainer.createEmbeddedView<U>(template, context);\n    }\n\n    // Inserts the component into the specified view container.\n    public attachToView<T>(componentRef:ComponentRef<T>, viewContainer:ViewContainerRef):void {\n        viewContainer.insert(componentRef.hostView, 0);\n    }\n\n    // Inserts the component in the root application node.\n    public attachToApplication<T>(componentRef:ComponentRef<T>):void {\n        this._applicationRef.attachView(componentRef.hostView);\n    }\n\n    // Detaches the component from the root application node.\n    public detachFromApplication<T>(componentRef:ComponentRef<T>):void {\n        this._applicationRef.detachView(componentRef.hostView);\n    }\n\n    // Moves the component to the specified DOM element.\n    public moveToElement<T>(componentRef:ComponentRef<T>, element:Element):void {\n        element.appendChild(componentRef.location.nativeElement);\n    }\n\n    // Moves the component to the document body.\n    public moveToDocumentBody<T>(componentRef:ComponentRef<T>):void {\n        this.moveToElement(componentRef, document.querySelector(\"body\")!);\n    }\n\n    public detachFromDocument<T>(componentRef:ComponentRef<T>):void {\n        const element = componentRef.location.nativeElement as Element;\n        // We can't use `element.remove()` due to lack of IE11 support.\n        if (element.parentNode) {\n            element.parentNode.removeChild(element);\n        }\n    }\n}\n"]}